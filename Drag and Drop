<div class="container">
   
    <div class="row">
      <div class="col-md-4">
        <div class="drag-container drag-container--origin ">
          <div class="section-heading">Header Items</div>
  
          <div cdkDropList id="optionsList" [cdkDropListData]="todo"
            [cdkDropListConnectedTo]="['includeList','excludeList']" class="item-list" (cdkDropListDropped)="drop($event)">
            <div class="item-box" *ngFor="let item of todo" cdkDrag>{{item}}</div>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="drag-container drag-container--destination" [ngClass]="optionSelected !== 1 ? 'drag-container--disabled' : null">
          <div class="section-heading">Selected order</div>
          <div cdkDropList id="includeList" [cdkDropListData]="done" [cdkDropListEnterPredicate]="allowDrop"
               [cdkDropListConnectedTo]="['optionsList']" class="item-list selected-order-container" (cdkDropListDropped)="drop($event)">
            <div class="item-box" [ngClass]="optionSelected === 2 ? 'item-box--disabled' : null" *ngFor="let item of done" cdkDrag>
              {{ item }}
              
              <span class="cancel-icon" (click)="cancelDrag(item)">&#x2715;</span>
            </div>
           
          </div>
        </div>
        <div>
          <button (click)="findCorrespondingDefaultItems()"> submit</button>
        </div>
      </div>
      
      
      <div class="col-md-4">
        <div class="drag-container drag-container--destination" [ngClass]="optionSelected !== 2 ? 'drag-container--disabled' : null">
          <div class="section-heading">Default order</div>
          <div cdkDropList id="excludeList" [cdkDropListData]="columnsArray" [cdkDropListEnterPredicate]="allowDrop"
               [cdkDropListConnectedTo]="['optionsList']" class="item-list selected-order-container" (cdkDropListDropped)="drop($event)">
            <div class="item-box" [ngClass]="optionSelected === 1 ? 'item-box--disabled' : null" *ngFor="let columnName of columnsArray" cdkDrag>
              {{ columnName }}             
            </div>
          </div>
        </div>
      </div>      
     
    </div>
  </div>



 <div class="col-md-4">
      <div class="drag-container drag-container--origin">
        <div class="section-heading">Header Items</div>
        <div cdkDropList id="optionsList" [cdkDropListData]="todo"
             [cdkDropListConnectedTo]="['includeList','excludeList']" class="item-list" (cdkDropListDropped)="drop($event)">
             <div class="item-box" *ngFor="let item of todo" cdkDrag>{{ item }}</div>
        </div>
      </div>
    </div>
------------------------------------------------------------import { Component } from '@angular/core';
import { CdkDragDrop, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';
import { DraganddropService } from './draganddrop.service';
import { ChangeDetectorRef } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  selectedOrderArray: string[] = [];
  done: any[] = new Array(46); 
  selectedItems: string[] = [];
defaultItems: string[] = [];
  title = 'dropanddrag';
  optionSelected: number = 1;
  keys: string[] = [];
  todo = ["ID", "accountnumber", "PatientName", "CLAIMKEY#","DOS","FACILITY","CPT","BILLED_VALUE","CHARGE_BALANCE","FinalActionNote","HOLD_CODE","FINALACTIONCODE",
"resolutioncode","datacompletiondate","datauser","Codingcompletiondate","codinguser","WORK_DATE","WORKED_BY","PendingComments","ClaimStatus","Completed","FollowupDate","fname",
"uploadeddate","Uploadedby","Clientslno","insurance","provider","age","lastworkeddate","insurance1","insurance2","fileddate","fileddate1","fileddate2","ARCompletionDate","claimtype","dxcode",
"worktype","finalcausecode","denialcode","nooftouches","lastsub1","LASTSUB2","reviewdate","TOUCHCODE","FC","ClaimWorktype","Uploadtype","WorkedScreen","assituse","Queue information"
];
  response: any;
  visibleColumns: string[] = [];
  columnsArray: string[]=[]
  defaultOrderArray: any;
 
ngOnInit(){
  this.draganddrop()
}

constructor(private draganddropService: DraganddropService,private cdr: ChangeDetectorRef){}


  onChange($event:any) {
    this.optionSelected = $event.value;
  }

  allowDrop = (drag: any, drop: any) => {
   
    if (drop.id === "includeList" && this.optionSelected === 1) {
      return true;
    } else if (drop.id === "excludeList" && this.optionSelected === 2) {
      return true;
    } else {
      return false;
    }
  };
  

  // drop(event: CdkDragDrop<any[]>) {
  //   if (event.previousContainer === event.container) {
  //     moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
  //   } else {
  //     transferArrayItem(event.previousContainer.data,
  //                       event.container.data,
  //                       event.previousIndex,
  //                       event.currentIndex);
  
  //     const selectedItem = this.done[event.currentIndex];
  //     const defaultIndex = this.columnsArray.indexOf(selectedItem);
    
  //     if (defaultIndex !== -1) {
  //       this.columnsArray.splice(event.currentIndex, 0, ...this.columnsArray.splice(defaultIndex, 1));
  //     }
  //   }
  // }
  


  // drop(event: CdkDragDrop<string[]>) {
  //   debugger;
  //   if (event.previousContainer === event.container) {
  //     // Handle reordering within the same list
  //     moveItemInArray(
  //       event.container.data,
  //       event.previousIndex,
  //       event.currentIndex
  //     );
  //   } else {

      
  //     const draggedItem = event.previousContainer.data[event.previousIndex];
  
  //     if (event.previousContainer.id === "optionsList") {
       
  //       const defaultIndex = this.columnsArray.indexOf(draggedItem);
  //       if (defaultIndex !== -1) {
  //         // this.columnsArray.splice(event.currentIndex, 0, ...this.columnsArray.splice(defaultIndex, 1));
         
  //          this.done.splice(defaultIndex,0,draggedItem);
         
  //         // this.done.splice(event.currentIndex, 0, draggedItem);
  //       }
  //     } else {
        
  //       const currentIndex = event.currentIndex;
  
       
  //       this.done.splice(currentIndex, 0, draggedItem);
  
        
  //       const originalIndex = this.columnsArray.indexOf(draggedItem);
  //       if (originalIndex !== -1) {
  //         this.columnsArray.splice(originalIndex, 1);
  //       }
  //     }
  
  //     this.cdr.detectChanges();
  //   }
  // }
  
  
  drop(event: CdkDragDrop<string[]>) {
    debugger
    if (event.previousContainer === event.container) {
      // Handle reordering within the same list
      moveItemInArray(
        event.container.data,
        event.previousIndex,
        event.currentIndex
      );
    } else {
      const draggedItem = event.previousContainer.data[event.previousIndex];
      const originalIndex = this.todo.indexOf(draggedItem); // Find index in Header Items list
  
      if (originalIndex !== -1) {
        if (event.previousContainer.id === "optionsList") {
          // Dragging from Header Items to Selected Order
          // Check if the dragged item is already in the selected items list
          if (!this.done.includes(draggedItem)) {
            // Create a new array to hold the updated selected items
            const newDone = [...this.done];
            // Find the index to insert the dragged item in the selected order
            let newIndex = event.currentIndex;
            while (newIndex > 0 && newIndex < newDone.length && draggedItem < newDone[newIndex - 1]) {
              newIndex--;
            }
  
            // Insert the dragged item at the desired index in the new array
            newDone.splice(newIndex, 0, draggedItem);
            this.done = newDone; // Replace the existing done array with the new array
          }
  
          // Remove the item from Header Items list
          this.todo.splice(originalIndex, 1);
        } else {
          // Dragging from Default Order to Selected Order
          const destList = event.container.data;
          const currentIndex = event.currentIndex;
  
          // Create a new array to hold the updated selected items
          const newDone = [...this.done];
          // Determine the index to insert the dragged item in the selected order
          let newIndex = currentIndex;
          while (newIndex > 0 && newIndex < newDone.length && draggedItem < newDone[newIndex - 1]) {
            newIndex--;
          }
  
          // Remove the dragged item from its original position in default order
          this.columnsArray.splice(originalIndex, 1);
          // Insert the dragged item at the desired index in the new array
          newDone.splice(newIndex, 0, draggedItem);
          this.done = newDone; // Replace the existing done array with the new array
        }
  
        // Ensure the length of the done array doesn't exceed 46
        if (this.done.length < 46) {
          this.done.pop();
        }
  
        this.cdr.detectChanges();
      }
    }
  }
  
  
  
 cancelDrag(item: string) {
  
    const itemIndex = this.done.indexOf(item);
    if (itemIndex !== -1) {     
      const removedItem = this.done.splice(itemIndex, 1)[0];
      this.cdr.detectChanges();       
      this.todo.push(removedItem);
    }
  }
  
 
 draganddrop() {
    debugger;
    this.draganddropService.value().subscribe((response: any) => {
      console.log('Response:', response);
      this.response = response; 
      this.keys = Object.keys(response); 
      const columns: Set<string> = new Set();
    
      for (const row of this.response) {
        const rowKeys = Object.keys(row);
        rowKeys.forEach(key => columns.add(key));
      }
      
      this.columnsArray = Array.from(columns);
      console.log('Columns Array:', this.columnsArray);
        
    });
  }

  

   findCorrespondingDefaultItems() {
    debugger;
    this.originalSelectedItems = [...this.selectedItems];
    this.originalDefaultItems = [...this.defaultItems];
    
    // Clear the values inside this.done array
    
  
    // Create a copy of selectedItems and columnsArray
    this.selectedItems = [...this.done];
    this.defaultItems = [...this.columnsArray];
  
    // Pad the shorter array with 'undefined' values
    while (this.selectedItems.length < this.defaultItems.length) {
      this.selectedItems.push('undefined');
    }
    while (this.defaultItems.length < this.selectedItems.length) {
      this.defaultItems.push('undefined');
    }
  
    // Create an array to store the combined items
    const combinedItems: { selected: string, correspondingDefault: string | null }[] = [];
  
    // Iterate through selectedItems and find corresponding default items
    for (let i = 0; i < this.selectedItems.length; i++) {
      const selectedItem = this.selectedItems[i];
      const correspondingDefault = this.defaultItems[i] === 'undefined' ? null : this.defaultItems[i];
      combinedItems.push({ selected: selectedItem, correspondingDefault });
    }
  
    this.done = this.done.map(() => undefined);


    console.log("Combined Items: ", combinedItems);
    console.log("Original Selected Items: ", this.selectedItems);
    console.log("Original Default Items: ", this.defaultItems);
  }
  
  
  findEditItems() {
    debugger;
    this.originalDoneValues = [...this.selectedItems];
    this.done = [...this.originalDoneValues]; 
  }



