
<div>
<input type="file" (change)="handleFileUpload($event)">
</div>

<div class="container">  
    <div class="row">
      <div class="col-md-4">
        <div class="drag-container drag-container--origin ">
          <div class="section-heading">Header Items</div>
  
          <div cdkDropList id="optionsList" [cdkDropListData]="headers"
            [cdkDropListConnectedTo]="['includeList','excludeList']" class="item-list" (cdkDropListDropped)="drop($event)">
            <div class="item-box" *ngFor="let item of headers" cdkDrag>{{item}}</div>
          </div>         
        </div>
      </div>
      <div class="col-md-4">
        <div class="drag-container drag-container--destination" [ngClass]="optionSelected !== 1 ? 'drag-container--disabled' : null">
          <div class="section-heading">Selected order</div>
          <div cdkDropList id="includeList" [cdkDropListData]="done" [cdkDropListEnterPredicate]="allowDrop"
               [cdkDropListConnectedTo]="['optionsList']" class="item-list selected-order-container" (cdkDropListDropped)="drop($event)">
               <div class="item-box" [ngClass]="optionSelected === 2 ? 'item-box--disabled' : null" *ngFor="let item of done; let i = index" cdkDrag>
                {{ item }}
                <span class="cancel-icon" *ngIf="item !== 'constantFixedValue'" (click)="cancelDrag(item)">&#x2715;</span>

              </div>           
          </div>
        </div>
        <div>
          <button class="button-spacing" (click)="findCorrespondingDefaultItems()">Submit</button>
          <button class="button-spacing" (click)="findEditItems()">Edit</button>
        </div>
      </div>
      
      <div class="col-md-4">
        <div class="drag-container drag-container--destination" [ngClass]="optionSelected !== 2 ? 'drag-container--disabled' : null">
          <div class="section-heading">Default order</div>
          <div cdkDropList id="excludeList" [cdkDropListData]="columnsArray" [cdkDropListEnterPredicate]="allowDrop"
               [cdkDropListConnectedTo]="['optionsList']" class="item-list selected-order-container" (cdkDropListDropped)="drop($event)">
            <div class="item-box" [ngClass]="optionSelected === 1 ? 'item-box--disabled' : null" *ngFor="let columnName of columnsArray" cdkDrag>
              {{ columnName }}             
            </div>
          </div>
        </div>
      </div>           
    </div>
  </div>
  <!-- style="border:none;" -->
import { Component } from '@angular/core';
import { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';
import { DraganddropService } from './draganddrop.service';
import { ChangeDetectorRef } from '@angular/core';
import * as XLSX from 'xlsx';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  currentlyDraggedItem: any;
  originalSelectedItems: string[] = []; 
  originalDoneValues: string[] = [];
  originalDefaultItems: string[] = [];
  selectedOrderArray: string[] = [];
  done: any[] = new Array(46).fill(null);
  arrayBuffer:any;
  // done: any[]=[]
  initialPositions: { [item: string]: number } = {};
  // excelData: any[] = [];
  selectedItems: string[] = [];
defaultItems: string[] = [];
maxSelectedItems: number = 46;
  title = 'dropanddrag';
  optionSelected: number = 1;
  keys: string[] = [];
  combinedItems: { selected: string, correspondingDefault: string | null }[] = [];
  columnData: Record<string, string[]> = {};
  headers:any[]=[];
  todo = ["ID", "accountnumber", "PatientName", "CLAIMKEY#","DOS","FACILITY","CPT","BILLED_VALUE","CHARGE_BALANCE","FinalActionNote","HOLD_CODE","FINALACTIONCODE",
"resolutioncode","datacompletiondate","datauser","Codingcompletiondate","codinguser","WORK_DATE","WORKED_BY","PendingComments","ClaimStatus","Completed","FollowupDate","fname",
"uploadeddate","Uploadedby","Clientslno","insurance","provider","age","lastworkeddate","insurance1","insurance2","fileddate","fileddate1","fileddate2","ARCompletionDate","claimtype","dxcode",
"worktype","finalcausecode","denialcode","nooftouches","lastsub1","LASTSUB2","reviewdate","TOUCHCODE","FC","ClaimWorktype","Uploadtype","WorkedScreen","assituse","Queue information"
];

  response: any;
  visibleColumns: string[] = [];
  columnsArray: string[]=[]
  defaultOrderArray: any;
  // combinedItems = []; 
  showEditData = false;
  customDropIndex: any;
  excelData: Record<string, string>[] = [];
  file!: File;
ngOnInit(){
  this.draganddrop()
} 

constructor(private draganddropService: DraganddropService,private cdr: ChangeDetectorRef
){
 
  
}

  onChange($event:any) {
    this.optionSelected = $event.value;
  }

  incomingfile(event:any) 
  {
  this.file= event.target.files[0]; 
  }

  allowDrop = (drag: any, drop: any) => {
   
    if (drop.id === "includeList" && this.optionSelected === 1) {
      return true;
    } else if (drop.id === "excludeList" && this.optionSelected === 2) {
      return true;
    } else {
      return false;
    }
  };
 
  addItemAtPosition(item: string, position: number) {
    if (this.done.length < this.maxSelectedItems) {
      this.done.splice(position, 0, item);
    }
  }


  // drop(event: CdkDragDrop<string[]>) {
  //   debugger;
  //   if (event.previousContainer === event.container) {
  //     // Handle reordering within the same list only if it's not the "Selected order" list
  //     if (event.container.id !== "includeList") {
  //       moveItemInArray(
  //         event.container.data,
  //         event.previousIndex,
  //         event.currentIndex
  //       );
  //     }
  //   } else {
  //     const draggedItem = event.previousContainer.data[event.previousIndex];
  
  //     // Determine the index where the item should be inserted (based on the drop location)
  //     const droppedIndex = event.currentIndex;
  //     const originalIndex = this.todo.indexOf(draggedItem);

  //       // Remove the dragged item from the 'todo' array
  //       if (originalIndex !== -1) {
  //           this.todo.splice(originalIndex, 1);
  //       }
      
  //     // Delete the first item from the 'done' array
  //     if (droppedIndex >= 0 && droppedIndex < this.done.length) {
        
  //       this.done.splice(droppedIndex, 1);
  //   }
  //     // Insert the dragged item at the specified index in the "Selected order" list
  //     this.done.splice(droppedIndex, 0, draggedItem);
  
  //     // Check if the length exceeds the maximum limit and truncate if necessary
  //     if (this.done.length > this.maxSelectedItems) {
  //       this.done.splice(this.maxSelectedItems);
  //     }
  //   }
  
  //   this.cdr.detectChanges();
  // }

 
  drop(event: CdkDragDrop<string[]>) {
    debugger;
    if (event.previousContainer === event.container) {
      // Handle reordering within the same list only if it's not the "Selected order" list
      if (event.container.id !== "includeList") {
        moveItemInArray(
          event.container.data,
          event.previousIndex,
          event.currentIndex
        );
      }
    } else {
      const draggedItem = event.previousContainer.data[event.previousIndex];
  
      // Determine the index where the item should be inserted (based on the drop location)
      const droppedIndex = event.currentIndex;
      const originalIndex = this.todo.indexOf(draggedItem);

        // Remove the dragged item from the 'todo' array
        if (originalIndex !== -1) {
          const correspondingColumnData = this.columnData[this.headers[originalIndex]];
          this.currentlyDraggedItem = correspondingColumnData;

          console.log("fhjhfjdfhjf",JSON.stringify(correspondingColumnData));
          
            this.headers.splice(originalIndex, 1);
        }
      
      // Delete the first item from the 'done' array
      if (droppedIndex >= 0 && droppedIndex < this.done.length) {
        
        this.done.splice(droppedIndex, 1);
    }
      // Insert the dragged item at the specified index in the "Selected order" list
      this.done.splice(droppedIndex, 0, draggedItem);
  
      // Check if the length exceeds the maximum limit and truncate if necessary
      if (this.done.length > this.maxSelectedItems) {
        this.done.splice(this.maxSelectedItems);
      }
    }
  
    this.cdr.detectChanges();
  }

  
  cancelDrag(item: string) {
    debugger
    const itemIndex = this.done.indexOf(item);
    if (itemIndex !== -1) {
      const removedItem = this.done.splice(itemIndex, 1)[0];
      this.cdr.detectChanges();
      this.headers.push(removedItem);
    }
  }
  

  draganddrop() {
    debugger;
    this.draganddropService.value().subscribe((response: any) => {
      console.log('Response:', response);
      this.response = response; 
      this.keys = Object.keys(response); 
      const columns: Set<string> = new Set();
    
      for (const row of this.response) {
        const rowKeys = Object.keys(row);
        rowKeys.forEach(key => columns.add(key));
      }
      
      this.columnsArray = Array.from(columns);
      console.log('Columns Array:', this.columnsArray);
        
    });
  }

  handleFileUpload(event: any) {

    debugger
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e: ProgressEvent<FileReader>) => {
        const contents = e.target?.result as ArrayBuffer;
        const workbook = XLSX.read(new Uint8Array(contents), { type: 'array' });
  
        const firstSheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheetName];
  
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  
        if (jsonData.length > 0) {
          const headers = jsonData[0] as string[];
          this.headers = headers;

          console.log("Header:",JSON.stringify (headers));

          const columnData: Record<string, string[]> = {}; // Create an object to store column-wise data
  
          for (let j = 0; j < headers.length; j++) {
            const columnName = headers[j];
            columnData[columnName] = jsonData.slice(1).map((row: unknown) => {
              if (Array.isArray(row)) {
                return row[j] as string;
              }
              return '';
            });
          }
  
          console.log("Column-wise data:",JSON.stringify (columnData));
          this.columnData=columnData
        }

        
      };
      reader.readAsArrayBuffer(file);
    }
  }
  

  columsdata(headers: any): void {
    this.draganddropService.headerdata(headers) 
      console.log(headers);
    
  }




  findCorrespondingDefaultItems() {
    debugger;
    this.originalSelectedItems = [...this.selectedItems];
    this.originalDefaultItems = [...this.defaultItems];
    
    // Clear the values inside this.done array
      
    // Create a copy of selectedItems and columnsArray
    this.selectedItems = [...this.done];
    this.defaultItems = [...this.columnsArray];
  
    // Pad the shorter array with 'undefined' values
    while (this.selectedItems.length < this.defaultItems.length) {
      this.selectedItems.push('undefined');
    }
    while (this.defaultItems.length < this.selectedItems.length) {
      this.defaultItems.push('undefined');
    }
  
    // Create an array to store the combined items
    const combinedItems: { selected: string, correspondingDefault: string | null }[] = [];
  
    // Iterate through selectedItems and find corresponding default items

    for (let i = 0; i < this.selectedItems.length; i++) {
      const selectedItem = this.selectedItems[i];
      const correspondingDefault = this.defaultItems[i] === 'undefined' ? null : this.defaultItems[i];
      combinedItems.push({ selected: selectedItem, correspondingDefault });
    }
  
    this.done = this.done.map(() => undefined);


    console.log("Combined Items: ", combinedItems);
    console.log("Original Selected Items: ", this.selectedItems);
    console.log("Original Default Items: ", this.defaultItems);

  }
  
  
  findEditItems() {
    
    debugger;
    this.originalDoneValues = [...this.selectedItems];
    this.done = [...this.originalDoneValues]; 

  }

}
---------------------------service
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
@Injectable({
  providedIn: 'root'
})
export class DraganddropService {

  constructor(private http: HttpClient) { }
  readonly apiUrl = "https://localhost:44367/api/usermanagemetController/DragandDrop";


  value(){
    return this.http.get<any>(this.apiUrl);
  }

  headerdata(headers:any){

  }
}
---------------------------
  


[HttpGet]
        [Route("api/usermanagemetController/DragandDrop")]
        public DataTable DragandDrop()
        {
            string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConString1"].ConnectionString;

            DataTable table = new DataTable();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand(); 
                cmd.Connection = connection;


                string query = "SELECT * FROM claimdetails"; 

                cmd.CommandText = query;

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(table); 
            }     

            return table;



        }


