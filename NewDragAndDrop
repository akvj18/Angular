<div class="container">  
    <div class="row">
      <div class="col-md-4">
        <div class="drag-container drag-container--origin ">
          <div class="section-heading">Header Items</div>
  
          <div cdkDropList id="optionsList" [cdkDropListData]="todo"
            [cdkDropListConnectedTo]="['includeList','excludeList']" class="item-list" (cdkDropListDropped)="drop($event)">
            <div class="item-box" *ngFor="let item of todo" cdkDrag>{{item}}</div>
          </div>         
        </div>
      </div>
      <div class="col-md-4">
        <div class="drag-container drag-container--destination" [ngClass]="optionSelected !== 1 ? 'drag-container--disabled' : null">
          <div class="section-heading">Selected order</div>
          <div cdkDropList id="includeList" [cdkDropListData]="done" [cdkDropListEnterPredicate]="allowDrop"
               [cdkDropListConnectedTo]="['optionsList']" class="item-list selected-order-container" (cdkDropListDropped)="drop($event)">
               <div class="item-box" [ngClass]="optionSelected === 2 ? 'item-box--disabled' : null" *ngFor="let item of done; let i = index" cdkDrag>
                {{ item }}
                <span class="cancel-icon" *ngIf="item !== 'constantFixedValue'" (click)="cancelDrag(i)">&#x2715;</span>
              </div>
           
          </div>
        </div>
        <div>
          <button class="button-spacing" (click)="findCorrespondingDefaultItems()">Submit</button>
          <button class="button-spacing" (click)="findEditItems()">Edit</button>
        </div>
      </div>
      
      
      <div class="col-md-4">
        <div class="drag-container drag-container--destination" [ngClass]="optionSelected !== 2 ? 'drag-container--disabled' : null">
          <div class="section-heading">Default order</div>
          <div cdkDropList id="excludeList" [cdkDropListData]="columnsArray" [cdkDropListEnterPredicate]="allowDrop"
               [cdkDropListConnectedTo]="['optionsList']" class="item-list selected-order-container" (cdkDropListDropped)="drop($event)">
            <div class="item-box" [ngClass]="optionSelected === 1 ? 'item-box--disabled' : null" *ngFor="let columnName of columnsArray" cdkDrag>
              {{ columnName }}             
            </div>
          </div>
        </div>
      </div>           
    </div>
  </div>
  <!-- style="border:none;" -->

------------------------------------------------------
import { Component } from '@angular/core';
import { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';
import { DraganddropService } from './draganddrop.service';
import { ChangeDetectorRef } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  currentlyDraggedItem: any;
  originalSelectedItems: string[] = []; 
  originalDoneValues: string[] = [];
  originalDefaultItems: string[] = [];
  selectedOrderArray: string[] = [];
  done: any[] = new Array(46).fill(null);
  
  // done: any[]=[]
  initialPositions: { [item: string]: number } = {};

  selectedItems: string[] = [];
defaultItems: string[] = [];
maxSelectedItems: number = 46;
  title = 'dropanddrag';
  optionSelected: number = 1;
  keys: string[] = [];
  combinedItems: { selected: string, correspondingDefault: string | null }[] = [];
  todo = ["ID", "accountnumber", "PatientName", "CLAIMKEY#","DOS","FACILITY","CPT","BILLED_VALUE","CHARGE_BALANCE","FinalActionNote","HOLD_CODE","FINALACTIONCODE",
"resolutioncode","datacompletiondate","datauser","Codingcompletiondate","codinguser","WORK_DATE","WORKED_BY","PendingComments","ClaimStatus","Completed","FollowupDate","fname",
"uploadeddate","Uploadedby","Clientslno","insurance","provider","age","lastworkeddate","insurance1","insurance2","fileddate","fileddate1","fileddate2","ARCompletionDate","claimtype","dxcode",
"worktype","finalcausecode","denialcode","nooftouches","lastsub1","LASTSUB2","reviewdate","TOUCHCODE","FC","ClaimWorktype","Uploadtype","WorkedScreen","assituse","Queue information"
];
  response: any;
  visibleColumns: string[] = [];
  columnsArray: string[]=[]
  defaultOrderArray: any;
  // combinedItems = []; 
  showEditData = false;
  customDropIndex: any;
ngOnInit(){
  this.draganddrop()
}

constructor(private draganddropService: DraganddropService,private cdr: ChangeDetectorRef
){
   
}

  onChange($event:any) {
    this.optionSelected = $event.value;
  }

  allowDrop = (drag: any, drop: any) => {
   
    if (drop.id === "includeList" && this.optionSelected === 1) {
      return true;
    } else if (drop.id === "excludeList" && this.optionSelected === 2) {
      return true;
    } else {
      return false;
    }
  };
 
  addItemAtPosition(item: string, position: number) {
    if (this.done.length < this.maxSelectedItems) {
      this.done.splice(position, 0, item);
    }
  }


  drop(event: CdkDragDrop<string[]>) {
    debugger;
    if (event.previousContainer === event.container) {
      // Handle reordering within the same list only if it's not the "Selected order" list
      if (event.container.id !== "includeList") {
        moveItemInArray(
          event.container.data,
          event.previousIndex,
          event.currentIndex
        );
      }
    } else {
      const draggedItem = event.previousContainer.data[event.previousIndex];
  
      // Determine the index where the item should be inserted (based on the drop location)
      const droppedIndex = event.currentIndex;
      
      
      // Delete the first item from the 'done' array
      //this.done.shift();
    if (droppedIndex >= 0 && droppedIndex < this.done.length) {
        this.done.splice(droppedIndex, 1);
    }
      // Insert the dragged item at the specified index in the "Selected order" list
      this.done.splice(droppedIndex, 0, draggedItem);
  
      // Check if the length exceeds the maximum limit and truncate if necessary
      if (this.done.length > this.maxSelectedItems) {
        this.done.splice(this.maxSelectedItems);
      }
    }
  
    this.cdr.detectChanges();
  }
  
 
  isValidTextItem(item: any): boolean {
    return typeof item === 'string' && item !== 'shape';
  }


  
cancelDrag(index: number) {
  debugger
  const fixedHeaderItem = ''; // Replace this with your desired header item
  this.done.splice(index, 1, fixedHeaderItem);
}
  draganddrop() {
    debugger;
    this.draganddropService.value().subscribe((response: any) => {
      console.log('Response:', response);
      this.response = response; 
      this.keys = Object.keys(response); 
      const columns: Set<string> = new Set();
    
      for (const row of this.response) {
        const rowKeys = Object.keys(row);
        rowKeys.forEach(key => columns.add(key));
      }
      
      this.columnsArray = Array.from(columns);
      console.log('Columns Array:', this.columnsArray);
        
    });
  }



  findCorrespondingDefaultItems() {
    debugger;
    this.originalSelectedItems = [...this.selectedItems];
    this.originalDefaultItems = [...this.defaultItems];
    
    // Clear the values inside this.done array
      
    // Create a copy of selectedItems and columnsArray
    this.selectedItems = [...this.done];
    this.defaultItems = [...this.columnsArray];
  
    // Pad the shorter array with 'undefined' values
    while (this.selectedItems.length < this.defaultItems.length) {
      this.selectedItems.push('undefined');
    }
    while (this.defaultItems.length < this.selectedItems.length) {
      this.defaultItems.push('undefined');
    }
  
    // Create an array to store the combined items
    const combinedItems: { selected: string, correspondingDefault: string | null }[] = [];
  
    // Iterate through selectedItems and find corresponding default items

    for (let i = 0; i < this.selectedItems.length; i++) {
      const selectedItem = this.selectedItems[i];
      const correspondingDefault = this.defaultItems[i] === 'undefined' ? null : this.defaultItems[i];
      combinedItems.push({ selected: selectedItem, correspondingDefault });
    }
  
    this.done = this.done.map(() => undefined);


    console.log("Combined Items: ", combinedItems);
    console.log("Original Selected Items: ", this.selectedItems);
    console.log("Original Default Items: ", this.defaultItems);

  }
  
  
  findEditItems() {
    
    debugger;
    this.originalDoneValues = [...this.selectedItems];
    this.done = [...this.originalDoneValues]; 

  }

}


  --------------------------------------------------------
.section-heading {
    padding: 5px 10px;
    font-size: 15px;
    font-weight: bold;
  }
  
  .drag-container {
    width: 400px;
    max-width: 100%;
    margin: 0 25px 25px 0;
    display: inline-block;
    vertical-align: top;
    border: 1px solid #E9ECEF;
    cursor: move;
    padding: 15px;
    border-radius: 5px;
  }
  
  .drag-container--origin {
    background-color: transparent;
  }
  
  .drag-container--destination {
    background-color: transparent;
  }
  
  .drag-container--disabled {
    pointer-events: none;
    cursor: none;
  }
  
  .item-list {
    min-height: 60px;
    border-radius: 4px;
    display: block;
  }
  .plain-text {
    background: none !important;
    border: none !important;
    padding: 0 !important;
    margin: 0 !important;
    color: inherit !important;
    font-size: inherit !important;
    /* Add any other styling that you want */
  }
   .item-box {
    padding: 8px 10px;
    border: solid 1px #ccc;
    margin-bottom: 5px;
    color: rgba(0, 0, 0, 0.87);
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    box-sizing: border-box;
    cursor: inherit;
    background: white;
    font-size: 14px;
    border-radius: 20px;
    height: 38px;
  }
  .item-box1 {
    display: flex;
    align-items: center;
    padding: 5px;
    margin: 5px;
    border: none;
    background-color: transparent;
    cursor: grab;
    user-select: none;
  }
  
  .item-box .cancel-icon {
    margin-left: 5px;
    cursor: pointer;
  }
 
  .item-box--exclude {
    background-color: #EB4444;
    color: #fff;
    border-radius: 0;
    margin-bottom: 0;
  }
  
  .item-box--disabled {
    background-color: #E9ECEF;
    color: #000;
  }
  
  .cdk-drag-preview {
    box-sizing: border-box;
    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
                0 8px 10px 1px rgba(0, 0, 0, 0.14),
                0 3px 14px 2px rgba(0, 0, 0, 0.12);
    border-radius: 20px;
  }
  
  .cdk-drag-placeholder {
    opacity: 0;
  }
  
  .cdk-drag-animating {
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
  }
  
  .item-list.cdk-drop-list-dragging .item-box:not(.cdk-drag-placeholder) {
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
  }
  .row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
}

.button-spacing {
  margin-right: 20px; 
}

.item-box--dragged {
  position: relative;
  z-index: 9999; 
}

.empty-item {
  border: 1px dashed #ccc;
  background-color: #f5f5f5;
  color: #aaa;
  text-align: center;
  padding: 10px;
  cursor: pointer;
} 
.selected-item-box {
  border: 1px solid #ccc;
  padding: 10px;
  min-height: 30px;
}

.empty-item-box {
  border: 1px dashed #ccc;
  background-color: #f5f5f5;
  min-height: 30px;
  text-align: center;
  padding: 10px;
  cursor: pointer;
}
.increased-size {
  width: 100%; /* Adjust the width as needed */
  height: 400px; /* Adjust the height as needed */
  padding: 20px; /* Add padding for spacing */
  box-sizing: border-box; /* Include padding and border in the total width and height */
}
.drag-handle {
  cursor: move;
  margin-left: auto;
}



.hidden {
  display: none;
}
.button-spacing {
  margin-right: 10px; /* You can adjust the value as needed */
}
------------------------------------------------------------------------------------
import { Component } from '@angular/core';
import { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';
import { DraganddropService } from './draganddrop.service';
import { ChangeDetectorRef } from '@angular/core';
import * as XLSX from 'xlsx';
import { FileuploadComponent } from './fileupload/fileupload.component';
import { Router } from '@angular/router';
import * as Papa from 'papaparse';
//  import { pdfjs } from 'pdfjs-dist';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  currentlyDraggedItem: any;

  originalSelectedItems: string[] = []; 
  originalDoneValues: string[] = [];
  originalDefaultItems: string[] = [];
  selectedOrderArray: string[] = [];
  done: any[] = new Array(46).fill(null);
  arrayBuffer:any;
  // done: any[]=[]
  initialPositions: { [item: string]: number } = {};
  // excelData: any[] = [];
  selectedItems: string[] = [];
defaultItems: string[] = [];
maxSelectedItems: number = 46;
  title = 'dropanddrag';
  optionSelected: number = 1;
  keys: string[] = [];
  combinedItems: { selected: string, correspondingDefault: string | null }[] = [];
  columnData: Record<string, string[]> = {};
  headers:any[]=[];
  todo = ["ID", "accountnumber", "PatientName", "CLAIMKEY#","DOS","FACILITY","CPT","BILLED_VALUE","CHARGE_BALANCE","FinalActionNote","HOLD_CODE","FINALACTIONCODE",
"resolutioncode","datacompletiondate","datauser","Codingcompletiondate","codinguser","WORK_DATE","WORKED_BY","PendingComments","ClaimStatus","Completed","FollowupDate","fname",
"uploadeddate","Uploadedby","Clientslno","insurance","provider","age","lastworkeddate","insurance1","insurance2","fileddate","fileddate1","fileddate2","ARCompletionDate","claimtype","dxcode",
"worktype","finalcausecode","denialcode","nooftouches","lastsub1","LASTSUB2","reviewdate","TOUCHCODE","FC","ClaimWorktype","Uploadtype","WorkedScreen","assituse","Queue information"
];

  response: any;
  visibleColumns: string[] = [];
  columnsArray: string[]=[]
  defaultOrderArray: any;
  // combinedItems = []; 
  showEditData = false;
  customDropIndex: any;

  correspondingColumnData:any;
  excelData: Record<string, string>[] = [];
  file!: File;
ngOnInit(){
  this.draganddrop()
} 

constructor(private draganddropService: DraganddropService,private cdr: ChangeDetectorRef,
   private router: Router,
){
 
  
}

  onChange($event:any) {
    this.optionSelected = $event.value;
  }

  incomingfile(event:any) 
  {
  this.file= event.target.files[0]; 
  }

  allowDrop = (drag: any, drop: any) => {
   
    if (drop.id === "includeList" && this.optionSelected === 1) {
      return true;
    } else if (drop.id === "excludeList" && this.optionSelected === 2) {
      return true;
    } else {
      return false;
    }
  };
 
  addItemAtPosition(item: string, position: number) {
    if (this.done.length < this.maxSelectedItems) {
      this.done.splice(position, 0, item);
    }
  }


  //drop(event: CdkDragDrop<string[]>) {
    //   debugger;
    //   if (event.previousContainer === event.container) {
    //     // Handle reordering within the same list only if it's not the "Selected order" list
    //     if (event.container.id !== "includeList") {
    //       moveItemInArray(
    //         event.container.data,
    //         event.previousIndex,
    //         event.currentIndex
    //       );
    //     }
    //   } else {
  
        
    //     const draggedItem = event.previousContainer.data[event.previousIndex];
    
    //     if (event.previousContainer.id === "optionsList") {
         
    //       const defaultIndex = this.columnsArray.indexOf(draggedItem);
    //       if (defaultIndex !== -1) {
    //         // this.columnsArray.splice(event.currentIndex, 0, ...this.columnsArray.splice(defaultIndex, 1));
           
    //          this.done.splice(defaultIndex,0,draggedItem);
           
    //         // this.done.splice(event.currentIndex, 0, draggedItem);
    //       }
    //     } else {
          
    //       const currentIndex = event.currentIndex;
    
         
    //       this.done.splice(currentIndex, 0, draggedItem);
    
          
    //       const originalIndex = this.columnsArray.indexOf(draggedItem);
    //       if (originalIndex !== -1) {
    //         this.columnsArray.splice(originalIndex, 1);
    //       }
    //     }
    
    //     this.cdr.detectChanges();
    //   }
    // }

 
  drop(event: CdkDragDrop<string[]>) {
    debugger;
    if (event.previousContainer === event.container) {
      // Handle reordering within the same list only if it's not the "Selected order" list
      if (event.container.id !== "includeList") {
        moveItemInArray(
          event.container.data,
          event.previousIndex,
          event.currentIndex
        );
      }
    } else {
      
      const draggedItem = event.previousContainer.data[event.previousIndex];
  
      // Determine the index where the item should be inserted (based on the drop location)
      const droppedIndex = event.currentIndex;
      const originalIndex = this.todo.indexOf(draggedItem);

        // Remove the dragged item from the 'todo' array
        if (originalIndex !== -1) {
       

          const correspondingColumnData = this.columnData[this.headers[originalIndex]];
          this.currentlyDraggedItem = correspondingColumnData;

          console.log("fhjhfjdfhjf",JSON.stringify(this.currentlyDraggedItem));
                    
          console.log(correspondingColumnData);   
          
          this.headers.splice(originalIndex, 1);
        }
      
      // Delete the first item from the 'done' array
      if (droppedIndex >= 0 && droppedIndex < this.done.length) {
        
        this.done.splice(droppedIndex, 1);
    }
      // Insert the dragged item at the specified index in the "Selected order" list
      this.done.splice(droppedIndex, 0, draggedItem);
  
      // Check if the length exceeds the maximum limit and truncate if necessary
      if (this.done.length > this.maxSelectedItems) {
        this.done.splice(this.maxSelectedItems);
      }

      
    } 
   
    this.cdr.detectChanges();
    
  }

Exceldataup(){
  debugger
    
  // this.draganddropService.Exceldata(this.currentlyDraggedItem).subscribe((response: any) => {
            
  // });
}

  cancelDrag(item: string) {
    debugger;
    const itemIndex = this.done.indexOf(item);
    if (itemIndex !== -1) {
      this.done[itemIndex] = ''; // Set the value to an empty string
      this.cdr.detectChanges();
    }
  }
  
  draganddrop() {
    debugger;
    this.draganddropService.value().subscribe((response: any) => {
      console.log('Response:', response);
      this.response = response; 
      this.keys = Object.keys(response); 
      const columns: Set<string> = new Set();
    
      for (const row of this.response) {
        const rowKeys = Object.keys(row);
        rowKeys.forEach(key => columns.add(key));
      }
      
      this.columnsArray = Array.from(columns);
      console.log('Columns Array:', this.columnsArray);
        
    });
  }

  // handleFileUpload(event: any) {
  //   debugger
  //   const file = event.target.files[0];
  //   if (file) {
  //     const reader = new FileReader();
  //     reader.onload = (e: ProgressEvent<FileReader>) => {
  //       const contents = e.target?.result as ArrayBuffer;
  //       const workbook = XLSX.read(new Uint8Array(contents), { type: 'array' });
  
  //       const firstSheetName = workbook.SheetNames[0];
  //       const worksheet = workbook.Sheets[firstSheetName];
  
  //       const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  
  //       if (jsonData.length > 0) {
  //         const headers = jsonData[0] as string[];
  //         this.headers = headers;

  //         console.log("Header:",JSON.stringify (headers));

  //         const columnData: Record<string, string[]> = {}; 
  
  //         for (let j = 0; j < headers.length; j++) {
  //           const columnName = headers[j];
  //           columnData[columnName] = jsonData.slice(1).map((row: unknown) => {
  //             if (Array.isArray(row)) {
  //               return row[j] as string;
  //             }
  //             return '';
  //           });
  //         }
  
  //         console.log("Column-wise data:",JSON.stringify (columnData));
  //         this.columnData=columnData
  //       }

        
  //     };
  //     reader.readAsArrayBuffer(file);
  //   }
  // }


  handleFileUpload(event: any) {
    debugger;
    const file = event.target.files[0];
  
    if (file) {
      const reader = new FileReader();
  
      reader.onload = (e: ProgressEvent<FileReader>) => {
        const contents = e.target?.result;
        const fileExtension = file.name.split('.').pop()?.toLowerCase();
  
        switch (fileExtension) {
          case 'xlsx':
            this.handleExcelFile(contents as ArrayBuffer);
            break;
            case 'txt':
              this.handleExcelFile(contents as ArrayBuffer);
              break;
          case 'csv':
            this.handleCsvFile(contents as string);
            break;
          case 'pdf':
            // this.handlePdfFile(contents as ArrayBuffer);
            break;
          default:
            console.log('Unsupported file format');
            break;
        }
      };
  
      // Read the file content as an ArrayBuffer using the FileReader
      reader.readAsArrayBuffer(file);
    }
  }


  handleExcelFile(contents: ArrayBuffer) {
    const workbook = XLSX.read(new Uint8Array(contents), { type: 'array' });
    const firstSheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[firstSheetName];
  
    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  
    if (jsonData.length > 0) {
      const headers = jsonData[0] as string[];
      this.headers = headers;
  
      // Process column-wise data as explained in the previous code snippets
      // Create an object to store data for each column and populate it similarly
      const columnData: Record<string, string[]> = {}; 
      for (let j = 0; j < headers.length; j++) {
        const columnName = headers[j];
        columnData[columnName] = jsonData.slice(1).map((row: unknown) => {
          if (Array.isArray(row)) {
            return row[j] as string;
          }
          return '';
        });
      }
      this.columnData = columnData;

    }
  }
  
 
  handleCsvFile(contents: string) {
    // Use papaparse library to parse CSV data
    Papa.parse(contents, {
      complete: (result) => {
        // The parsed CSV data is available in the 'result' object
        const jsonData = result.data; // Array of rows
  
        if (jsonData.length > 0) {
          const headers = jsonData[0] as string[];
          this.headers = headers;
  
          // Process column-wise data as explained in the previous code snippets
          // Create an object to store data for each column and populate it similarly
          const columnData: Record<string, string[]> = {}; 
          for (let j = 0; j < headers.length; j++) {
            const columnName = headers[j];
            columnData[columnName] = jsonData.slice(1).map((row: unknown) => {
              if (Array.isArray(row)) {
                return row[j] as string;
              }
              return '';
            });
          }
          this.columnData = columnData;
        }
      }
    });
  }
  
  
  
  // handlePdfFile(contents: ArrayBuffer | string) {
  //   const loadingTask = pdfjs.getDocument(new Uint8Array(contents));
    
  //   loadingTask.promise.then(pdf => {
  //     const numPages = pdf.numPages;
  
  //     // Iterate over each page and extract text content
  //     const getTextContent = (page: pdfjs.PDFPageProxy) => {
  //       return page.getTextContent().then(textContent => {
  //         const textItems = textContent.items;
  //         let pageText = '';
  
  //         for (const item of textItems) {
  //           pageText += item.str + ' ';
  //         }
  
  //         return pageText;
  //       });
  //     };
  
  //     const pagesPromises: Promise<string>[] = [];
  //     for (let pageNum = 1; pageNum <= numPages; pageNum++) {
  //       const pagePromise = pdf.getPage(pageNum).then(getTextContent);
  //       pagesPromises.push(pagePromise);
  //     }
  
  //     Promise.all(pagesPromises).then(pageTexts => {
  //       // Process pageTexts as needed
  //     });
  //   });
  // }



  columsdata(headers: any): void {
    this.draganddropService.headerdata(headers) 
     console.log(headers);   
  }


  Exceldata(correspondingColumnData: any): void {
    debugger
   
    this.draganddropService.Exceldata(correspondingColumnData) 
     console.log(correspondingColumnData);   
  }

  findCorrespondingDefaultItems() : void {
    debugger;
    this.originalSelectedItems = [...this.selectedItems];
    this.originalDefaultItems = [...this.defaultItems];
    
    // Clear the values inside this.done array
      
    // Create a copy of selectedItems and columnsArray
    this.selectedItems = [...this.done];
    this.defaultItems = [...this.columnsArray];
  
    // Pad the shorter array with 'undefined' values
    while (this.selectedItems.length < this.defaultItems.length) {
      this.selectedItems.push('undefined');
    }
    while (this.defaultItems.length < this.selectedItems.length) {
      this.defaultItems.push('undefined');
    }
  
    // Create an array to store the combined items
    const combinedItems: { selected: string, correspondingDefault: string | null }[] = [];
  
    // Iterate through selectedItems and find corresponding default items

    for (let i = 0; i < this.selectedItems.length; i++) {     
      const selectedItem = this.selectedItems[i];
      const correspondingDefault = this.defaultItems[i] === 'undefined' ? null : this.defaultItems[i];
      combinedItems.push({ selected: selectedItem, correspondingDefault });
    }
  
    this.done = this.done.map(() => undefined);

    this.draganddropService.headerdata(combinedItems).subscribe(
      response => {
        console.log(response); 
      })


               
    console.log("Combined Items: ", combinedItems);
    console.log("Original Selected Items: ", this.selectedItems);
    console.log("Original Default Items: ", this.defaultItems);

    const rearrangedColumnData: Record<string, string[]> = {};
    
for (const item of combinedItems) {
  if (item.correspondingDefault !== null && item.selected !== 'undefined') {
    // Use the correspondingDefault item as the key and assign the column data to the temporary object
    rearrangedColumnData[item.correspondingDefault] = this.columnData[item.selected];
  }
}
this.columnData = rearrangedColumnData;
    console.log("Original Default Items: ", this.columnData);


   this.draganddropService.Exceldata(this.columnData).subscribe((response: any) => {
            
   });
  }
  
  
  findEditItems() {
    
    debugger;
    this.originalDoneValues = [...this.selectedItems];
    this.done = [...this.originalDoneValues]; 

  }

  gofileupload() {
    debugger
    this.router.navigate(['/fileupload']);
  }


}


  



